name: 'Terraform'

on:
  push:
    branches:
    - "main"
  pull_request:
env:
  tenancy_ocid: ${{ secrets.TENANCY_OCID }}
  comartment_ocid: ${{ secrets.COMPARTMENT_OCID }}
  user_ocid: ${{ secrets.USER_OCID }}
  fingerprint: ${{ secrets.FINGERPRINT }}
  private_key_file: ${{secrets.PRIVATE_KEY}}
  
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev
    
      

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: 'Write Config & Key Files'
      run: |
        mkdir ~/.oci
        echo "[DEFAULT]" >> ~/.oci/config
        echo "user=${{secrets.USER_OCID}}" >> ~/.oci/config
        echo "fingerprint=${{secrets.FINGERPRINT}}" >> ~/.oci/config
        echo "compartment_ocid=${{secrets.COMPARTMENT_OCID}}" >> ~/.oci/config
        echo "region=${{secrets.REGION}}" >> ~/.oci/config
        echo "tenancy=${{secrets.TENANCY_OCID}}" >> ~/.oci/config
        echo "key_file=~/.oci/key.pem" >> ~/.oci/config
        echo "${{secrets.PRIVATE_KEY}}" >> ~/.oci/key.pem
        cat ~/.oci/config
        echo " ~/.oci/key.pem file"
        cat ~/.oci/key.pem
        ls -lta ~/.oci
        ls -lta ~
        pwd
    - name: 'Install OCI CLI'
      run: |
        curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
        chmod +x install.sh
        ./install.sh --accept-all-defaults
        echo "/home/runner/bin" >> $GITHUB_PATH
        #exec -l $SHELL
        echo " Fixing file permissions and testing oci"
        /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/config
        /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/key.pem
        echo " oci os ns get"
        /home/runner/bin/oci os ns get

   
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

   
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
